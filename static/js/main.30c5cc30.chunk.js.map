{"version":3,"sources":["redux/actions.ts","redux/selectors.ts","components/CurrencyExchange.tsx","container/CurrencyEContainer.tsx","currency/Currency.tsx","redux/currencyReducer.ts","redux/state.ts","App.tsx","index.tsx"],"names":["ACTIONS_TYPE","selectAllValues","state","currency","ChangeCurrencyFieldAC","amountOfBYN","amountOfCurrency","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","isBuying","CHANGE_CHANGE_ACTION","CurrencyExchange","currenciesName","currentCurrency","currencyRate","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","index","onClick","data-action","CurrencyEContainer","dispatch","useDispatch","useSelector","currencies","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","ChangeCurrentCurrencyAC","Currency","initialState","reducers","combineReducers","createStore","App","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30c5cc30.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = \"CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE\",\r\n    CHANGE_CHANGE_ACTION = \"CurrencyExchange/CHANGE_CHANGE_ACTION\",\r\n    CHANGE_CURRENT_CURRENCY = \"CurrencyExchange/CHANGE_CURRENT_CURRENCY\",\r\n}\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n    payload: {\r\n        amountOfBYN: string,\r\n        amountOfCurrency: string\r\n    }\r\n};\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n        payload: {amountOfBYN, amountOfCurrency}\r\n    }\r\n};\r\n\r\nexport type ChangeAction = {\r\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n    payload: { isBuying: boolean }\r\n};\r\n\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n        payload: {\r\n            isBuying\r\n        }\r\n    }\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n    payload: {\r\n        currentCurrency: string\r\n    }\r\n};\r\n\r\nexport const ChangeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n        payload: {\r\n            currentCurrency\r\n        }\r\n    }\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;","import {IGlobalState} from \"./state\";\r\n\r\ninterface IRootState extends IGlobalState {\r\n}\r\n\r\nexport const selectAllValues = (state: IRootState) => state.currency;","import React from \"react\";\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = ({\r\n                                                                   currenciesName,\r\n                                                                   currentCurrency,\r\n                                                                   currencyRate,\r\n                                                                   isBuying,\r\n                                                                   amountOfBYN,\r\n                                                                   amountOfCurrency,\r\n                                                                   changeCurrencyField,\r\n                                                                   changeAction,\r\n                                                                   changeCurrentCurrency,\r\n                                                               }) => {\r\n    const viewCurrency = isBuying ? (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField}/>\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField}/>\r\n            </label>\r\n        </React.Fragment>\r\n    ) : (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField}/>\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField}/>\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? \"activeCurrency\" : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? \"active\" : \"\"} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? \"\" : \"active\"} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import React from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectAllValues} from \"../redux/selectors\";\r\nimport {ChangeActionAC, ChangeCurrencyFieldAC, ChangeCurrentCurrencyAC, CurrencyReducersTypes} from \"../redux/actions\";\r\nimport {CurrencyType} from \"../redux/currencyReducer\";\r\nimport CurrencyExchange from \"../components/CurrencyExchange\";\r\n\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>();\r\n    const {currencies, currentCurrency, isBuying, amountOfBYN, amountOfCurrency } = useSelector(selectAllValues);\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === \"byn\") {\r\n                if (value === \"\") {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === \"\") {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === \"buy\" ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false))\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default CurrencyEContainer;","import React from \"react\";\r\nimport CurrencyExchangeContainer from \"../container/CurrencyEContainer\"\r\n\r\n\r\nconst Currency: React.FunctionComponent = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchangeContainer/>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Currency;\r\n\r\n","import {ACTIONS_TYPE, CurrencyReducersTypes} from \"./actions\";\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string,\r\n    buyRate: number,\r\n    sellRate: number\r\n};\r\n\r\nexport type CurrencyState = {\r\n    currencies: CurrencyType[];\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    currentCurrency: string\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: \"USD\",\r\n            buyRate: 2.62,\r\n            sellRate: 2.58\r\n        },\r\n        {\r\n            currencyName: \"EUR\",\r\n            buyRate: 3.1,\r\n            sellRate: 3.06\r\n        },\r\n        {\r\n            currencyName: \"RUR\",\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341\r\n        }\r\n    ],\r\n    currentCurrency: \"USD\",\r\n    isBuying: true,\r\n    amountOfBYN: \"\",\r\n    amountOfCurrency: \"\"\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                amountOfCurrency: \"\",\r\n                amountOfBYN: \"\"\r\n            };\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                amountOfCurrency: \"\",\r\n                amountOfBYN: \"\"\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","import {combineReducers, createStore} from \"redux\";\r\nimport {currencyReducer} from \"./currencyReducer\";\r\n\r\nexport const reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\nexport const store = createStore(reducers);","import React from \"react\";\nimport \"./App.css\";\nimport Currency from \"./currency/Currency\";\nimport {createStore} from \"redux\";\nimport {reducers} from \"./redux/state\";\nimport {Provider} from \"react-redux\";\n\n\nfunction App() {\n    const store = createStore(reducers);\n    return (\n        <Provider store={store}>\n            <div className=\"container\">\n                <Currency/>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}